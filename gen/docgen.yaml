SourcePath: .
SourceExt: _doc.yaml

Categories:
  - ID: Murex
    Title: Murex
    Description:
    Templates:
    - OutputPath: .
      CategoryFile:
      OutputExt: .md
      CategoryTemplate:
      DocumentTemplate: gen/root-md-doc.tmpl

  - ID: commands
    Title: Builtin Commands
    Summary: >-
      Write portable scripts knowing that Murex ships it's own coreutils. Better still, have the power of `jq`, `awk`, `sed` (etc) against any data format you wish (YAML, CSV, etc) and using the same basic syntax and commands
    Description: |-
      {{ include "gen/commands-md-cat.inc.md" }}

    SubCategories:
    - ID: commands.io
      Title: Input / Output Streams
      VueIcon: arrows-turn-to-dots
      Description: |-
        Commands for managing the flow of data between different processes and/or the terminal screen.
    - ID: commands.fs
      Title: Filesystem Operations
      VueIcon: floppy-disk
      Description: |-
        Commands for working with files and/or the filesystem.
    - ID: commands.posix
      Title: Defined by POSIX
      VueIcon: server
      Description: |-
        Commands defined by POSIX.
    - ID: commands.list
      Title: List / Array Editing
      VueIcon: rectangle-list
      Description: |-
        Commands that operate against a list or array.
    - ID: commands.str
      Title: String Manipulation
      VueIcon: quote-left
      Description: |-
        Commands for working with strings.
        > Several list based tools will also work with strings. Those that can, are included in this sub-section.
    - ID: commands.num
      Title: Numeric / Math Tools
      VueIcon: square-root-variable
      Description: |-
        Commands for working with numerical data.
    - ID: commands.struct
      Title: Structured Data Management
      VueIcon: sitemap
      Description: |-
        Commands for working with structured data such as maps, tables, arrays and other data formats that are present in documents such as CSV, JSON, YAML, TOML, Sexpr, CSV, etc. 
    - ID: commands.table
      Title: Table Management
      VueIcon: table
      Description: |-
        Commands specifically for working with tabulated data.
    - ID: commands.sys
      Title: System Inspection
      VueIcon: microchip
      Description: |-
        Tools to inspect the host system.
    - ID: commands.shell
      Title: Shell / Murex Management
      VueIcon: gear
      Description: |-
        Commands to manage the Murex shell session.
    - ID: commands.esc
      Title: String Escaping / Character Codes
      VueIcon: code
      Description: |-
        Commands to escape special characters in various different string formats.
    - ID: commands.proc
      Title: Process Management
      VueIcon: robot
      Description: |-
        Management of system processes and Murex FIDs.
    - ID: commands.lang
      Title: Language And Scripting
      VueIcon: language
      Description: |-
        Various commands that enable control flow, error handling and other important characteristics that turn Murex into a functional programming language.
    - ID: commands.err
      Title: Error Handling
      VueIcon: bomb
      Description: |-
        Tools and control flow structures to handle errors.
    - ID: commands.help
      Title: Help and Hint Tools
      VueIcon: lightbulb
      Description: |-
        Tools for providing help and hints, useful when working inside the interactive shell.
    Templates:
    - OutputPath: docs/commands
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/commands-md-cat.tmpl
      DocumentTemplate: gen/commands-md-doc.tmpl

    - OutputPath: builtins/docs
      CategoryFile: summaries.go
      CategoryTemplate: gen/commands-go-cat.tmpl

    - OutputPath: gen/vuepress
      CategoryFile: commands_generated.json
      CategoryTemplate: gen/commands-vue-cat.tmpl

  - ID: mkarray
    Title: mkarray
    Summary:
    Description:
    Templates:
    - OutputPath: docs/mkarray
      OutputExt: .md
      DocumentTemplate: gen/mkarray-md-doc.tmpl

    - OutputPath: gen/includes
      CategoryFile: ../../gen/includes/autogenerated.mkarray.inc.md
      CategoryTemplate: gen/mkarray-inc-cat.tmpl

  - ID: optional
    Title: Optional Builtins Reference
    Summary: >-
      {{ include "gen/optionals-md-cat.inc.md" }}
    Description: |-
      {{ include "gen/optionals-md-cat.inc.md" }}

    Templates:
    - OutputPath: docs/optional
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/murex-md-cat.tmpl
      DocumentTemplate: gen/commands-md-doc.tmpl

  - ID: parser
    Title: Operators And Tokens
    Summary: >-
      Murex supports both expressions and statements. Thus you have a flexible language that is both highly readable and yet still concise. No other shell offers the best of both these worlds as well as Murex does
    Description: |-
      {{ include "gen/parser-md-cat.inc.md" }}
  
    Templates:
    - OutputPath: docs/parser
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/parser-md-cat.tmpl
      DocumentTemplate: gen/parser-md-doc.tmpl

    - OutputPath: gen/vuepress
      CategoryFile: parser_generated.json
      CategoryTemplate: gen/parser-vue-cat.tmpl

    SubCategories:
    - ID: parser.modifiers
      Title: Modifiers
      VueIcon: angles-right
      Description:
    - ID: parser.data
      Title: Data Manipulation
      VueIcon: angles-right
      Description:
    #- ID: parser.comparators
    #  Title: Comparators
    #  VueIcon: angles-right
    #  Description:
    - ID: parser.assignment
      Title: Assignment
      VueIcon: angles-right
      Description:
    - ID: parser.conditionals
      Title: Conditionals & Boolean
      VueIcon: angles-right
      Description:
    - ID: parser.sigils
      Title: Sigils
      VueIcon: angles-right
      Description:
    - ID: parser.constants
      Title: Constants
      VueIcon: angles-right
      Description:
    - ID: parser.subshells
      Title: Sub-Shells
      VueIcon: angles-right
      Description:
    - ID: parser.pipes
      Title: Pipes
      VueIcon: angles-right
      Description:

  # events:
  - ID: events
    Title: events
    Summary: >-
      Murex's event system allows for easy and flexible code. You can extend upon the shell in a multitude of ways.
    Description: |-
      {{ include "gen/events-md-cat.inc.md" }}
    Templates:
    - OutputPath: docs/events
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/events-md-cat.tmpl
      DocumentTemplate: gen/events-md-doc.tmpl

  # types:
  - ID: types
    Title: Data-Type Reference
    Summary: >-
      Murex's builtin commands and expressions work consistently across a multitude of different document types, those JSON objects and CSV tables (et al) feel as native as Murex _data-types_, as strings do in Bash, s-expr in LISP and JSON in JavaScript.
    Description: |-
      {{ include "gen/types-md-cat.inc.md" }}

    Templates:
    - OutputPath: docs/types
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/murex-md-cat.tmpl
      DocumentTemplate: gen/types-md-doc.tmpl

  # special variables:
  - ID: variables
    Title: Special Variables
    Summary: >-
      Variables are tokenized, so to avoid accidental bugs caused by (for example) spaces in file names. Enhancements like these are what makes Murex a much safer language than traditional shells
    Description: |-
      {{ include "gen/variables-md-cat.inc.md" }}
    Templates:
    - OutputPath: docs/variables
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/variables-md-cat.tmpl
      DocumentTemplate: gen/variables-md-doc.tmpl

    - OutputPath: gen/vuepress
      CategoryFile: variables_generated.json
      CategoryTemplate: gen/variables-vue-cat.tmpl

    SubCategories:
    - ID: vars.env
      Title: Environmental Variables
      VueIcon: arrows-turn-to-dots
      Description: |-
        Environmental variables are variables held at an operating system level and thus will get passed between running processes.
    - ID: vars.scoped
      Title: Locally Scoped Variables
      VueIcon: arrows-turn-to-dots
      Description: |-
        Scoped variables are defined within a specific function's scope. These might be reserved variables but they might also be used to provide structured returns from a particular scope.
    - ID: vars.posix
      Title: Defined by POSIX
      VueIcon: arrows-turn-to-dots
      Description: |-
        These are variables defined by POSIX. In general they will be environmental variables, however in some cases Murex will follow the naming convention described in POSIX but return a reserved variable instead.
    - ID: vars.reserved
      Title: Reserved Variables
      VueIcon: arrows-turn-to-dots
      Description: |-
        Reserved variables are read only values that are dynamically generated at the point of querying. They behave a little more like functions than variables, albeit the convenience of being called like a variable.

  # pipes:

  # apis:
  - ID: apis
    Title: API Reference
    Summary: >-
      These APIs are provided for reference for any developers wishing to write their own Murex builtins. 
    Description: |-
      {{ include "gen/apis-md-cat.inc.md" }}

    Templates:
    - OutputPath: docs/apis
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/murex-md-cat.tmpl
      DocumentTemplate: gen/apis-md-doc.tmpl

  # user guide:
  - ID: user-guide
    Title: User Guide
    Summary: >-
      Murex doesn't just aim to be a well thought out language, the interactive shell boasts an excellent out-of-the-box experience which makes other shells feel stone age in comparison
    Description: |-
      This section contains miscellaneous documents on using and configuring the
      shell and Murex's numerous features.
    Templates:
    - OutputPath: docs/user-guide
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/userguide-md-cat.tmpl.md
      DocumentTemplate: gen/userguide-md-doc.tmpl

    - OutputPath: gen/vuepress
      CategoryFile: userguide_generated.json
      CategoryTemplate: gen/userguide-vue-cat.tmpl

    SubCategories:
      - ID: guide.beginners
        Title: Beginners Guides
        VueIcon:
        Description: |-
          Just getting started in Murex? Then have a read of these guides.
      - ID: guide.reference
        Title: Cheat Sheets
        Description: |-
          The guides are useful for beginners and experiences users alike.
      - ID: guide.readmore
        Title: Read More
        Description: |-
          Read more about specific features within Murex. This section contains more detailed contents rather than broader documents providing an overview. The contents is suitable for beginners and experienced users alike.


  # integrations
  - ID: integrations
    Title: Integrations
    Summary: >-
      Murex aims to provide you with the best support for your wider command line needs, in its "out-of-the-box" configuration
    Description:
    Templates:
    - OutputPath: docs/integrations
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/integrations-md-cat.tmpl
      DocumentTemplate: gen/integrations-md-doc.tmpl

  # blog
  - ID: blog
    Title: Blog
    Summary: >-
      A collection of Murex related documents and personal thoughts
    Description: |-
      A collection of Murex related documents and personal thoughts.
    Templates:
    - OutputPath: docs/blog
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/blog-md-cat.tmpl
      DocumentTemplate: gen/blog-md-doc.tmpl

  # changelog
  - ID: changelog
    Title: Change Log
    Summary: >-
      Murex is committed to backwards compatibility. While we do want to continue to grow and improve the shell, this will not come at the expense of long term usability. Read more about the latest enhancements and bug fixes
    Description: |-
      Track new features, any breaking changes, and the release history here.
    Templates:
    - OutputPath: docs/changelog
      CategoryFile: README.md
      OutputExt: .md
      CategoryTemplate: gen/changelog-md-cat.tmpl
      DocumentTemplate: gen/changelog-md-doc.tmpl
