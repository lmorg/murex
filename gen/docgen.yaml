SourcePath: .
SourceExt: _doc.yaml

Categories:
  - ID: commands
    Title: Command Reference
    Description: |-
      This section is a glossary of _murex_ builtin commands.
      
      Because _murex_ is loosely modelled on the functional paradigm, it means
      all language constructs are exposed via functions and those are typically
      builtins because they can share the _murex_ runtime virtual machine.
      However any executable command can also be called from within _murex_;
      be that either via the `exec` builtin or natively like you would from any
      Linux, UNIX, or even Windows command prompt.

      ### Other Reference Material

      #### Language Guides

      1. [GUIDE.control-structures.md](./GUIDE.control-structures.md), which
      contains builtins required for building logic.

      #### _murex_'s Source Code

      In _murex_'s source under the `lang/builtins` path of the project files
      is several directories, each hosting different categories of _murex_
      builtins. From core commands through to data-types and methods.
      
      Each package will include a README.md file with a basic summary of what
      that package is used for and all you to enable or disable builtins, should
      you decide to compile the shell from source.

      #### Shell Commands For Querying Builtins

      From the shell itself: run `builtins` to list the builtin command.

      If you require a manual on any of those commands, you can run `murex-docs`
      to return the same markdown-formatted document as those listed below. eg

      ```
      murex-docs trypipe
      ```
  
    Templates:
    - OutputPath: docs/commands
      CategoryFile: ../GUIDE.builtin-functions.md
      OutputExt: .md
      CategoryTemplate: gen/commands-md-cat.tmpl
      DocumentTemplate: gen/commands-md-doc.tmpl

    - OutputPath: builtins/docs
      CategoryFile: 000_summaries_commands_docgen.go
      OutputExt: _commands_docgen.go
      CategoryTemplate: gen/commands-go-cat.tmpl
      DocumentTemplate: gen/commands-go-doc.tmpl

    - OutputPath: builtins
      CategoryFile: docgen_test.go
      OutputExt: _commands_docgen.go
      CategoryTemplate: gen/commands-go_test-cat.tmpl
      DocumentTemplate: 

  # events:

  # types:
  - ID: types
    Title: Data-Type Reference
    Description: |-
      This section is a glossary of data-types which _murex_ is natively aware.

      Most of the time you will not need to worry about typing in_murex_ as the
      shell is designed around productivity as opposed to strictness despite
      generally following a strictly typed design. Examples of this are:

      * Variables when outputted are automatically converted to strings

      * `=` and `let` functions evaluate the data type as well as the value.
        An example of strict typing in `=` can be seen with these 2 blocks:

        1. adding numbers:

      ```
            » let a=1  # define 'a' as number
            » let b=1  # define 'b' as number
            » = a+b
            2
            ```
          
            (returns '2' as both `$a` and `$b` are numbers)

        2. adding strings:

      ```
            » set a=1  # define 'a' as string
            » let b=1  # define 'b' as number
            » = a+b
            11
            ```

            (returns '11' as `$a` is string so values are concatenated)

      * Data can be case into other data-types using the `cast` command:

      ```
          » echo '{ "key": "value" }' -> cast json 
          ```

      ### Definitions
      
      For clarity, it is worth explaining a couple of terms:
      
      1. "Data-types" in _murex_ are a description of the format of data. This
      means that while any stdio stream in UNIX will by "bytes", _murex_ might
      label that data as being a JSON string or CSV file (for example) which
      means any builtins that parse that stdio stream, for example to return
      the first 8 items, would need to parse those types differently. Thus a
      "data-type" in _murex_ is actually more than just a description of a data
      structure; it is a series of APIs to marshall and unmarshall data from
      complex file formats. This enables you to use the same command line tools
      to query any type of output.

      2. "Primitive" data-types refer to types that are the required by _murex_
      to function. These will be `int`, `float` / `number`, `bool`, `string`,
      `generic`, `json`, and `null`. All other data-types are optional albeit
      still recommended (unless described otherwise).

      ### Feature Sets
      
      Since not all data formats are equal (for example the TOML file format
      doesn't support naked arrays where as JSON does), you may find some
      features missing in some data-types which are present in others. If in
      doubt then refer to the manual here or check the API manual for more
      details about specific hooks.

    Templates:
    - OutputPath: docs/types
      CategoryFile: ../GUIDE.type-system.md
      OutputExt: .md
      CategoryTemplate: gen/types-md-cat.tmpl
      DocumentTemplate: gen/types-md-doc.tmpl

    #- OutputPath: builtins/docs
    #  CategoryFile: 000_summaries_commands_docgen.go
    #  OutputExt: _commands_docgen.go
    #  CategoryTemplate: gen/commands-go-cat.tmpl
    #  DocumentTemplate: gen/commands-go-doc.tmpl

    #- OutputPath: builtins
    #  CategoryFile: docgen_test.go
    #  OutputExt: _commands_docgen.go
    #  CategoryTemplate: gen/commands-go_test-cat.tmpl
    #  DocumentTemplate: 

  # pipes:

  - ID: apis
    Title: API Reference
    Description: |-
      This section is a glossary of APIs.
      
      These APIs are provided for reference for any developers wishing to write
      their own builtins. However some APIs are still worth being aware of even
      when just writing _murex_ scripts because they provide a background into
      the internal logic of _murex_'s runtime.

    Templates:
    - OutputPath: docs/apis
      CategoryFile: ../GUIDE.apis.md
      OutputExt: .md
      CategoryTemplate: gen/apis-md-cat.tmpl
      DocumentTemplate: gen/apis-md-doc.tmpl

# Compile the default profiles

  - ID: default-profile-all
    Title: all
    Description: |-
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_all.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 

  - ID: default-profile-posix
    Title: posix
    Description: |-
      // +build !windows,!plan9
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_posix.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 

  - ID: default-profile-linux
    Title: linux
    Description: |-
      // +build linux
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_linux.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 
        
  - ID: default-profile-windows
    Title: windows
    Description: |-
      // +build windows
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_windows.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 
        
  - ID: default-profile-osx
    Title: osx
    Description: |-
      // +build darwin
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_darwin.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 
        
  - ID: default-profile-freebsd
    Title: freebsd
    Description: |-
      // +build freebsd
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_freebsd.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 

  - ID: default-profile-openbsd
    Title: openbsd
    Description: |-
      // +build openbsd
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_openbsd.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 

  - ID: default-profile-netbsd
    Title: netbsd
    Description: |-
      // +build netbsd
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_netbsd.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 

  - ID: default-profile-dragonfly
    Title: dragonfly
    Description: |-
      // +build dragonfly
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_dragonfly.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 

  - ID: default-profile-solaris
    Title: solaris
    Description: |-
      // +build solaris
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_solaris.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 

  - ID: default-profile-plan9
    Title: plan9
    Description: |-
      // +build plan9
    Templates:
    - OutputPath: config/defaults
      CategoryFile: auto_generated_plan9.go
      OutputExt:
      CategoryTemplate: gen/profile-platform.tmpl
      DocumentTemplate: 